<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>六六小哥哥</title>
  
  <subtitle>生命在于折腾。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.liuliuxiaogege.com/"/>
  <updated>2018-12-05T07:32:48.332Z</updated>
  <id>http://www.liuliuxiaogege.com/</id>
  
  <author>
    <name>Ayden</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信公众号基本配置 TOKEN 验证失败</title>
    <link href="http://www.liuliuxiaogege.com/6-wechat-token.html"/>
    <id>http://www.liuliuxiaogege.com/6-wechat-token.html</id>
    <published>2018-12-05T07:20:30.000Z</published>
    <updated>2018-12-05T07:32:48.332Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 11 2018 14:09:53 GMT+0800 (China Standard Time) --><h2 id="错误背景"><a href="#错误背景" class="headerlink" title="错误背景"></a>错误背景</h2><ul><li>微信公众号开发基本配置时，以下情况确认无误<ul><li>URL 确认无误，外网可以访问到</li><li>内网穿透端口为 80 （我采用的是本地内网穿透<a href="https://natapp.cn/" target="_blank" rel="noopener">natapp</a>）</li><li>URL 实名认证</li><li>TOKEN 前后填写一致</li></ul></li></ul><h2 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决"></a>错误解决</h2><ul><li>最后在echo $echoStr前面加一句ob_clean();，代码如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public <span class="function"><span class="keyword">function</span> <span class="title">valid</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $echoStr = $_GET[<span class="string">"echostr"</span>];</span><br><span class="line">        <span class="keyword">if</span>($<span class="keyword">this</span>-&gt;checkSignature())&#123;</span><br><span class="line">            header(<span class="string">'content-type:text'</span>);</span><br><span class="line">            ob_clean();</span><br><span class="line">            echo $echoStr;</span><br><span class="line">            exit;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="错误总结"><a href="#错误总结" class="headerlink" title="错误总结"></a>错误总结</h2><p>因为我用的是 thinkphp 框架，在<code>echo $echoStr</code>之前可能有一些你不知道的输出到”输出缓冲区”，需要用清理服务器端信息的缓存</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 11 2018 14:09:53 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;错误背景&quot;&gt;&lt;a href=&quot;#错误背景&quot; class=&quot;headerlink&quot; title=&quot;错误背景&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="错误笔记" scheme="http://www.liuliuxiaogege.com/categories/%E9%94%99%E8%AF%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="wechat" scheme="http://www.liuliuxiaogege.com/tags/wechat/"/>
    
      <category term="公众号" scheme="http://www.liuliuxiaogege.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>this.$router 与 this.$route 区别</title>
    <link href="http://www.liuliuxiaogege.com/5-vue-router.html"/>
    <id>http://www.liuliuxiaogege.com/5-vue-router.html</id>
    <published>2018-11-30T06:09:33.000Z</published>
    <updated>2018-11-30T06:15:16.997Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 11 2018 14:09:53 GMT+0800 (China Standard Time) --><h3 id="this-router："><a href="#this-router：" class="headerlink" title="this.$router："></a>this.$router：</h3><p>表示全局路由器对象，项目中通过router路由参数注入路由之后，在任何一个页面都可以通过此方法获取到路由器对象，并调用其push(), go()等方法；</p><h3 id="this-route"><a href="#this-route" class="headerlink" title="this.$route:"></a>this.$route:</h3><p>表示当前正在用于跳转的路由器对象，可以调用其name、path、query、params等方法；</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 11 2018 14:09:53 GMT+0800 (China Standard Time) --&gt;&lt;h3 id=&quot;this-router：&quot;&gt;&lt;a href=&quot;#this-router：&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Vue" scheme="http://www.liuliuxiaogege.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://www.liuliuxiaogege.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>git clone 错误记录</title>
    <link href="http://www.liuliuxiaogege.com/4-git-clone.html"/>
    <id>http://www.liuliuxiaogege.com/4-git-clone.html</id>
    <published>2018-11-30T02:19:09.000Z</published>
    <updated>2018-11-30T02:50:44.243Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 11 2018 14:09:53 GMT+0800 (China Standard Time) --><h2 id="错误背景"><a href="#错误背景" class="headerlink" title="错误背景"></a>错误背景</h2><p>Git 工作流，克隆远程仓库代码失败。</p><h2 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述"></a>错误描述</h2><ul><li>输入：git clone ssh:XXXXXXX.git</li><li><blockquote><p><strong>error：warning: remote HEAD refers to nonexistent ref, unable to checkout.</strong></p></blockquote></li></ul><p>google 此错误，按照答案去远程服务器一顿操作：</p><ol start="2"><li><p>git branch</p><blockquote><p>xxx</p></blockquote></li><li><p>git checkout xxx</p></li></ol><ul><li><blockquote><p><strong>error：This operation must be run in a work tree</strong></p></blockquote></li></ul><h2 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决"></a>错误解决</h2><ul><li>git clone -b xxx ssh:/XXXXXXXX.git</li></ul><h2 id="错误总结"><a href="#错误总结" class="headerlink" title="错误总结"></a>错误总结</h2><ul><li><p>git init –bare 初始化的是裸仓库，一般作为远程仓库，保存的是修改</p></li><li><p>git init 初始化的是完整的仓库，一般做本地仓库使用，保存的是整个项目资源</p></li><li><p>裸仓库不支持任何 git 操作，这也是第二个错误的原因，因为不允许在裸仓库切换分支，所以解决的思路就是<strong>直接克隆指定的分支。</strong></p></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 11 2018 14:09:53 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;错误背景&quot;&gt;&lt;a href=&quot;#错误背景&quot; class=&quot;headerlink&quot; title=&quot;错误背景&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="爬坑总结" scheme="http://www.liuliuxiaogege.com/categories/%E7%88%AC%E5%9D%91%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Git" scheme="http://www.liuliuxiaogege.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Vue , axios 自定义请求头无法操作，解决:（Access-Control-Expose-Headers）</title>
    <link href="http://www.liuliuxiaogege.com/1-vue-header.html"/>
    <id>http://www.liuliuxiaogege.com/1-vue-header.html</id>
    <published>2018-11-21T03:19:33.000Z</published>
    <updated>2018-11-30T02:41:44.222Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 11 2018 14:09:53 GMT+0800 (China Standard Time) --><h2 id="错误背景："><a href="#错误背景：" class="headerlink" title="错误背景："></a>错误背景：</h2><p>业务中注册登录的实现： <code>TOKEN</code> 验证，查了一些资料，主流的验证机制 : 用户在首次登录成功时从后端获取一个 <code>token</code>，然后在访问 <strong>登陆之后才有权限</strong> 访问的组件中，每次调用后端的 API 时，请求头中必须携带这个 <code>token</code> 作为验证。</p><h2 id="涉及知识点："><a href="#涉及知识点：" class="headerlink" title="涉及知识点："></a>涉及知识点：</h2><ul><li>前端：<ul><li>跨域配置</li><li>vue axios 请求拦截器 <code>this.$axios.interceptors.request</code></li><li>vue axios 响应拦截器 <code>this.$axios.interceptors.response</code></li></ul></li><li>后端：<ul><li>跨域配置</li><li>响应头配置：<code>Access-Control-Expose-Headers: &lt;header-name&gt;, &lt;header-name&gt;, ...</code></li></ul></li></ul><h2 id="错误描述："><a href="#错误描述：" class="headerlink" title="错误描述："></a>错误描述：</h2><h4 id="后端代码如下："><a href="#后端代码如下：" class="headerlink" title="后端代码如下："></a>后端代码如下：</h4><p>前端访问后端的 API 时，后端设置响应头<br>(因为这里只做测试，所以代码比较简洁)：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    public <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        header(<span class="string">'token:123123'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"响应头设置成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="前端请求如下："><a href="#前端请求如下：" class="headerlink" title="前端请求如下："></a>前端请求如下：</h4><p>请求拦截：先查找 <code>localStorage</code> 是否有 <code>token</code>字段，有则添加到请求头<br>响应拦截：获取响应头中的 <code>token</code> 字段，并存储到<code>localStorage</code><br>代码如下：<br>test 组件（test.vue）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">      sendAjax: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 配置拦截器，中间件思想。白话：use 给请求之前做的事，可以是多件，可以 use 多次</span></span><br><span class="line">        <span class="keyword">this</span>.$axios.interceptors.request.use(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'请求拦截器：'</span>)</span><br><span class="line">          <span class="built_in">console</span>.log(config)</span><br><span class="line">          <span class="comment">// 设置请求头，在这里插入代码片，类似 set-cookie</span></span><br><span class="line">          <span class="keyword">var</span> token = localStorage.getItem(<span class="string">'token'</span>);</span><br><span class="line">          <span class="keyword">if</span>(token)&#123;</span><br><span class="line">            <span class="comment">// config.headers = &#123;&#125; 这样设置，是覆盖</span></span><br><span class="line">            config.headers[<span class="string">'token'</span>] = token; <span class="comment">// 这样设置，是添加 </span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> config</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 响应拦截器</span></span><br><span class="line">        <span class="keyword">this</span>.$axios.interceptors.response.use(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'响应拦截器：'</span>)</span><br><span class="line">          <span class="built_in">console</span>.log(res)</span><br><span class="line">          <span class="comment">// 获取服务器的响应头</span></span><br><span class="line">          <span class="keyword">if</span>(res.headers.token)&#123;</span><br><span class="line">            <span class="keyword">var</span> token = res.headers.token;</span><br><span class="line">            <span class="built_in">console</span>.log(token)</span><br><span class="line">            localStorage.setItem(<span class="string">'token'</span>,token)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> res</span><br><span class="line">        &#125;);</span><br><span class="line">      </span><br><span class="line"> <span class="comment">// url 根据自己后端的来，这里是我自己通过内网穿透的后端接口，发生跨域</span></span><br><span class="line"> <span class="keyword">this</span>.$axios.post(Vue , axios 自定义请求头无法操作).then(</span><br><span class="line">          res =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'有响应'</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h4 id="请求之后："><a href="#请求之后：" class="headerlink" title="请求之后："></a>请求之后：</h4><p><img src="http://pis4qk1vz.bkt.clouddn.com/setHeaderSuccess.png" alt="在这里插入图片描述"><br>是不是以为搞定了？接下来是见证奇迹的时刻 ~<br><img src="http://pis4qk1vz.bkt.clouddn.com/whereToken.png" alt="在这里插入图片描述"><br>接下来是我反反复复的各种验证，无效！虽然在报文体中可以取到 <code>token</code> 不影响业务逻辑完成功能。<br>以下也可以用：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(res.data.token)&#123;</span><br><span class="line">            <span class="keyword">var</span> token = res.data.token;</span><br><span class="line">            <span class="built_in">console</span>.log(token)</span><br><span class="line">            localStorage.setItem(<span class="string">'token'</span>,token)</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><p></p><p>但是，真的很想知道为什么：Network 有显示 ，说明请求头设置成功，但是为什么拿不到？最重要的是！它也不给我报错！！！！<br>看了很多技术博客，找到一个与<code>Access-Control-Allow-Headers</code>很像的属性：于是设置成这样：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">'Access-Control-Expose-Headers: token'</span>);  <span class="comment">// 坑！服务器 headers 白名单，可以让客户端进行访问操作的属性</span></span><br></pre></td></tr></table></figure><p></p><h2 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决"></a>错误解决</h2><h4 id="MDN-给的解释是这样的："><a href="#MDN-给的解释是这样的：" class="headerlink" title="MDN 给的解释是这样的："></a>MDN 给的解释是这样的：</h4><p><strong>响应首部 Access-Control-Expose-Headers 列出了哪些首部可以作为响应的一部分暴露给外部</strong><br>我理解的意思就是可以供外部去操作，<br>参考 MDN 的解释-&gt; <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Expose-Headers" target="_blank" rel="noopener">Access-Control-Expose-Headers</a><br><img src="http://pis4qk1vz.bkt.clouddn.com/six.png" alt="在这里插入图片描述"><br>除此之外，还需要在后端设置</p><h4 id="后端设置如下："><a href="#后端设置如下：" class="headerlink" title="后端设置如下："></a>后端设置如下：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">'Access-Control-Expose-Headers: token'</span>);  <span class="comment">// 坑！服务器 headers 白名单，可以让客户端进行访问</span></span><br><span class="line">header(<span class="string">'Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, Connection, User-Agent, Cookie, token'</span>);</span><br></pre></td></tr></table></figure><h4 id="上成功图示："><a href="#上成功图示：" class="headerlink" title="上成功图示："></a>上成功图示：</h4><p><img src="http://pis4qk1vz.bkt.clouddn.com/success.png" alt="在这里插入图片描述"></p><h2 id="错误总结："><a href="#错误总结：" class="headerlink" title="错误总结："></a>错误总结：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">'Access-Control-Allow-Headers: token'</span>);</span><br><span class="line">header(<span class="string">'Access-Control-Expose-Headers: token'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>对比两个 header 字段：我比较浅显的做了下区别就是：<br>一个是：<strong>允许请求头中携带，另一个是：允许访问携带的该属性。</strong><br>就像客人来了家里做客，<br>一个是：<strong>我允许你来我家，一个是：我允许你来我家里吃饭、睡觉 …</strong><br>（如有理解偏差请指正）</p></blockquote><p>本文有参考阮大哥的 <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 11 2018 14:09:53 GMT+0800 (China Standard Time) --&gt;&lt;h2 id=&quot;错误背景：&quot;&gt;&lt;a href=&quot;#错误背景：&quot; class=&quot;headerlink&quot; title=&quot;错误背景：&quot;&gt;
      
    
    </summary>
    
      <category term="爬坑总结" scheme="http://www.liuliuxiaogege.com/categories/%E7%88%AC%E5%9D%91%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Vue" scheme="http://www.liuliuxiaogege.com/tags/Vue/"/>
    
      <category term="axios" scheme="http://www.liuliuxiaogege.com/tags/axios/"/>
    
      <category term="token" scheme="http://www.liuliuxiaogege.com/tags/token/"/>
    
      <category term="跨域" scheme="http://www.liuliuxiaogege.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="拦截器" scheme="http://www.liuliuxiaogege.com/tags/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Git 工作常用</title>
    <link href="http://www.liuliuxiaogege.com/2-git-version-control%20.html"/>
    <id>http://www.liuliuxiaogege.com/2-git-version-control .html</id>
    <published>2018-11-11T06:42:56.000Z</published>
    <updated>2018-11-30T02:41:44.220Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 11 2018 14:09:53 GMT+0800 (China Standard Time) --><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ol><li>git init 用来初始化本地 Git 仓库，可进行一系列 git 操作</li><li>git init –bare 用来初始化远程 Git 裸仓库，用来记录提交的修改信息 ，不可进行一系列 git 操作</li></ol><h3 id="工作流-暂存区回滚"><a href="#工作流-暂存区回滚" class="headerlink" title="工作流-暂存区回滚"></a>工作流-暂存区回滚</h3><ol><li>git add . 提交到暂存区</li><li>git reset HEAD text.name 清空暂存区的修改</li><li>git checkout – text.name 工作区回滚到修改之前</li></ol><h3 id="工作流-提交回滚"><a href="#工作流-提交回滚" class="headerlink" title="工作流-提交回滚"></a>工作流-提交回滚</h3><ol><li>git log 查看提交日志的 commit 号</li><li>git reset –hard text.commit 回滚到 commit 号对应的版本</li><li>git rm text.name 清空本地文件</li><li>git commit -m 清空仓库</li></ol><h3 id="工作流-仓库文件替换工作区和暂存区-危险操作"><a href="#工作流-仓库文件替换工作区和暂存区-危险操作" class="headerlink" title="工作流-仓库文件替换工作区和暂存区(危险操作)"></a>工作流-仓库文件替换工作区和暂存区(危险操作)</h3><ol><li>git checkout HEAD text.commit</li></ol><h3 id="工作流-正常提交"><a href="#工作流-正常提交" class="headerlink" title="工作流-正常提交"></a>工作流-正常提交</h3><ol><li>git add . 提交到暂存区</li><li>git status 查看修改状态</li><li>git commit -m ‘备注’ 将暂存区的修改提交到本地仓库的操作</li><li>git push origin master 提交到远程仓库</li></ol><h3 id="ssh-key"><a href="#ssh-key" class="headerlink" title="ssh key"></a>ssh key</h3><ol><li>ssh-keygen -t rsa -P ‘’ 本地生成 rsa 公钥</li><li>公钥复制到 github ssh setting</li><li>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> 判断是否为通</li></ol><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><ol><li>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:xxxxxxxx.git</li><li>git push -u origin master (-u) 默认本地 master 和远程本地 master 关联</li><li>git remote remove origin 取消远程关联</li></ol><h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h3><ol><li>远程代码拷贝到本地</li><li>git clone ig:reps/docs_couple_training.git</li></ol><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><ol><li>git tag 查看所有标签</li><li>git tag name 创建标签</li><li>git tag -a name -m ‘comment’ 指定提交信息</li><li>git tag -d name 删除标签</li><li>git push origin name 标签发布</li></ol><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><ol><li>git branch 查看分支</li><li>git branch ayden 创建 ayden 分支</li><li>git checkout 切换分支</li><li>git merge ayden 将 ayden 分支的修改合并到 master</li><li>git branch -d ayden 删除 ayden 分支</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>工作流：<ul><li>工作区-&gt;暂存区-&gt;版本库-&gt;远程仓库</li></ul></li><li>初始化：<ul><li>git init -&gt; git add -&gt; git commit</li></ul></li><li>远程仓库：<ul><li>git remote add -&gt; git pull -&gt; git push -&gt; git clone</li></ul></li><li>分支管理：<ul><li>git branch -&gt; git checkout -&gt; git merge</li></ul></li><li>标签管理：<ul><li>git tag -&gt; git push</li></ul></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 11 2018 14:09:53 GMT+0800 (China Standard Time) --&gt;&lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.liuliuxiaogege.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Git" scheme="http://www.liuliuxiaogege.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>会话控制（PHP）</title>
    <link href="http://www.liuliuxiaogege.com/3-php-session-control%20%20.html"/>
    <id>http://www.liuliuxiaogege.com/3-php-session-control  .html</id>
    <published>2018-11-11T06:42:56.000Z</published>
    <updated>2018-11-30T02:50:44.237Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 11 2018 14:09:53 GMT+0800 (China Standard Time) --><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><ul><li>超文本传输协议，网络协议</li><li>请求和响应模式，用户请求，服务器响应</li><li>最大的特点：无连接，无状态</li></ul><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><ul><li>网景公司 93 年发明的一种技术，用来保持客户端和服务端保持连接状态</li><li>保存在客户端中，主要分为 内存cookie （保存在内存中，浏览器关闭就消失）和 硬盘cookie （保存在硬盘中，有一个过期时间，除非手动清除或者到了过期时间，否则长期存在）</li><li>php 设置 cookie：<ul><li>setcookie(name,value,expire),</li><li>setrawcookie()</li></ul></li></ul><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><ul><li>会话就是服务器与浏览器认识的这段时间</li><li>保存在服务端</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Dec 11 2018 14:09:53 GMT+0800 (China Standard Time) --&gt;&lt;h3 id=&quot;http&quot;&gt;&lt;a href=&quot;#http&quot; class=&quot;headerlink&quot; title=&quot;http&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.liuliuxiaogege.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://www.liuliuxiaogege.com/tags/PHP/"/>
    
      <category term="会话控制" scheme="http://www.liuliuxiaogege.com/tags/%E4%BC%9A%E8%AF%9D%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
</feed>
