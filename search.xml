<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[5-vue-router]]></title>
    <url>%2F5-vue-router.html</url>
    <content type="text"><![CDATA[this.$router：表示全局路由器对象，项目中通过router路由参数注入路由之后，在任何一个页面都可以通过此方法获取到路由器对象，并调用其push(), go()等方法；this.$route:表示当前正在用于跳转的路由器对象，可以调用其name、path、query、params等方法；]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git clone 错误记录]]></title>
    <url>%2F4-git-clone.html</url>
    <content type="text"><![CDATA[错误背景Git 工作流，克隆远程仓库代码失败。错误描述输入：git clone ssh:XXXXXXX.giterror：warning: remote HEAD refers to nonexistent ref, unable to checkout.google 此错误，按照答案去远程服务器一顿操作：git branchxxxgit checkout xxxerror：This operation must be run in a work tree错误解决git clone -b xxx ssh:/XXXXXXXX.git错误总结git init –bare 初始化的是裸仓库，一般作为远程仓库，保存的是修改git init 初始化的是完整的仓库，一般做本地仓库使用，保存的是整个项目资源裸仓库不支持任何 git 操作，这也是第二个错误的原因，因为不允许在裸仓库切换分支，所以解决的思路就是直接克隆指定的分支。]]></content>
      <categories>
        <category>爬坑总结</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue , axios 自定义请求头无法操作，解决:（Access-Control-Expose-Headers）]]></title>
    <url>%2F1-vue-header.html</url>
    <content type="text"><![CDATA[错误背景：业务中注册登录的实现： TOKEN 验证，查了一些资料，主流的验证机制 : 用户在首次登录成功时从后端获取一个 token，然后在访问 登陆之后才有权限 访问的组件中，每次调用后端的 API 时，请求头中必须携带这个 token 作为验证。涉及知识点：前端：跨域配置vue axios 请求拦截器 this.$axios.interceptors.requestvue axios 响应拦截器 this.$axios.interceptors.response后端：跨域配置响应头配置：Access-Control-Expose-Headers: &lt;header-name&gt;, &lt;header-name&gt;, ...错误描述：后端代码如下：前端访问后端的 API 时，后端设置响应头(因为这里只做测试，所以代码比较简洁)：12345678class Test extends Controller&#123; public function index() &#123; header('token:123123'); return "响应头设置成功"; &#125;&#125;前端请求如下：请求拦截：先查找 localStorage 是否有 token字段，有则添加到请求头响应拦截：获取响应头中的 token 字段，并存储到localStorage代码如下：test 组件（test.vue）1234567891011121314151617181920212223242526272829303132333435methods: &#123; sendAjax: function () &#123; // 配置拦截器，中间件思想。白话：use 给请求之前做的事，可以是多件，可以 use 多次 this.$axios.interceptors.request.use((config) =&gt; &#123; console.log('请求拦截器：') console.log(config) // 设置请求头，在这里插入代码片，类似 set-cookie var token = localStorage.getItem('token'); if(token)&#123; // config.headers = &#123;&#125; 这样设置，是覆盖 config.headers['token'] = token; // 这样设置，是添加 &#125; return config &#125;); // 响应拦截器 this.$axios.interceptors.response.use((res) =&gt; &#123; console.log('响应拦截器：') console.log(res) // 获取服务器的响应头 if(res.headers.token)&#123; var token = res.headers.token; console.log(token) localStorage.setItem('token',token) &#125; return res &#125;); // url 根据自己后端的来，这里是我自己通过内网穿透的后端接口，发生跨域 this.$axios.post(Vue , axios 自定义请求头无法操作).then( res =&gt; &#123; console.log('有响应'); console.log(res); &#125; ) &#125;请求之后：是不是以为搞定了？接下来是见证奇迹的时刻 ~接下来是我反反复复的各种验证，无效！虽然在报文体中可以取到 token 不影响业务逻辑完成功能。以下也可以用：12345if(res.data.token)&#123; var token = res.data.token; console.log(token) localStorage.setItem('token',token) &#125;但是，真的很想知道为什么：Network 有显示 ，说明请求头设置成功，但是为什么拿不到？最重要的是！它也不给我报错！！！！看了很多技术博客，找到一个与Access-Control-Allow-Headers很像的属性：于是设置成这样：1header('Access-Control-Expose-Headers: token'); // 坑！服务器 headers 白名单，可以让客户端进行访问操作的属性错误解决MDN 给的解释是这样的：响应首部 Access-Control-Expose-Headers 列出了哪些首部可以作为响应的一部分暴露给外部我理解的意思就是可以供外部去操作，参考 MDN 的解释-&gt; Access-Control-Expose-Headers除此之外，还需要在后端设置后端设置如下：12header('Access-Control-Expose-Headers: token'); // 坑！服务器 headers 白名单，可以让客户端进行访问header('Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, Connection, User-Agent, Cookie, token');上成功图示：错误总结：12header('Access-Control-Allow-Headers: token');header('Access-Control-Expose-Headers: token')对比两个 header 字段：我比较浅显的做了下区别就是：一个是：允许请求头中携带，另一个是：允许访问携带的该属性。就像客人来了家里做客，一个是：我允许你来我家，一个是：我允许你来我家里吃饭、睡觉 …（如有理解偏差请指正）本文有参考阮大哥的 跨域资源共享 CORS 详解]]></content>
      <categories>
        <category>爬坑总结</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>axios</tag>
        <tag>token</tag>
        <tag>跨域</tag>
        <tag>拦截器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 工作常用]]></title>
    <url>%2F2-git-version-control%20.html</url>
    <content type="text"><![CDATA[初始化git init 用来初始化本地 Git 仓库，可进行一系列 git 操作git init –bare 用来初始化远程 Git 裸仓库，用来记录提交的修改信息 ，不可进行一系列 git 操作工作流-暂存区回滚git add . 提交到暂存区git reset HEAD text.name 清空暂存区的修改git checkout – text.name 工作区回滚到修改之前工作流-提交回滚git log 查看提交日志的 commit 号git reset –hard text.commit 回滚到 commit 号对应的版本git rm text.name 清空本地文件git commit -m 清空仓库工作流-仓库文件替换工作区和暂存区(危险操作)git checkout HEAD text.commit工作流-正常提交git add . 提交到暂存区git status 查看修改状态git commit -m ‘备注’ 将暂存区的修改提交到本地仓库的操作git push origin master 提交到远程仓库ssh keyssh-keygen -t rsa -P ‘’ 本地生成 rsa 公钥公钥复制到 github ssh settingssh -T git@github.com 判断是否为通添加远程仓库git remote add origin git@github.com:xxxxxxxx.gitgit push -u origin master (-u) 默认本地 master 和远程本地 master 关联git remote remove origin 取消远程关联克隆仓库远程代码拷贝到本地git clone ig:reps/docs_couple_training.git标签管理git tag 查看所有标签git tag name 创建标签git tag -a name -m ‘comment’ 指定提交信息git tag -d name 删除标签git push origin name 标签发布分支管理git branch 查看分支git branch ayden 创建 ayden 分支git checkout 切换分支git merge ayden 将 ayden 分支的修改合并到 mastergit branch -d ayden 删除 ayden 分支总结工作流：工作区-&gt;暂存区-&gt;版本库-&gt;远程仓库初始化：git init -&gt; git add -&gt; git commit远程仓库：git remote add -&gt; git pull -&gt; git push -&gt; git clone分支管理：git branch -&gt; git checkout -&gt; git merge标签管理：git tag -&gt; git push]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[会话控制（PHP）]]></title>
    <url>%2F3-php-session-control%20%20.html</url>
    <content type="text"><![CDATA[http超文本传输协议，网络协议请求和响应模式，用户请求，服务器响应最大的特点：无连接，无状态cookie网景公司 93 年发明的一种技术，用来保持客户端和服务端保持连接状态保存在客户端中，主要分为 内存cookie （保存在内存中，浏览器关闭就消失）和 硬盘cookie （保存在硬盘中，有一个过期时间，除非手动清除或者到了过期时间，否则长期存在）php 设置 cookie：setcookie(name,value,expire),setrawcookie()session会话就是服务器与浏览器认识的这段时间保存在服务端]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>会话控制</tag>
      </tags>
  </entry>
</search>
